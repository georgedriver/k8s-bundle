{{ $cluster_name := .Environment.Values.cluster.codename }}
cluster_name: {{ $cluster_name }}

commonLabels:
    k8s-monitoring: "true"

defaultRules:
    labels: &scrapeLabels
      k8s-monitoring: "true"
    create: true

prometheus:
  ingress:
    enabled: {{ .Environment.Values | getOrNil "ingress.enabled" | default false }}
    hosts:
    - prometheus.{{ .Environment.Values.cluster.domain }}
    annotations:
      kubernetes.io/ingress.class: {{ .Environment.Values.cluster.ingress_class }}
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: "false"
    serviceMonitorSelector:
      matchLabels:
        *scrapeLabels
    ruleSelector:
      matchLabels:
        *scrapeLabels
    externalUrl: http://prometheus.{{ .Environment.Values.cluster.domain }}
    externalLabels:
      cluster: "{{ $cluster_name }}"
    ## Prometheus StorageSpec for persistent data
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
    ##
    storageSpec:
    ## Using PersistentVolumeClaim
    ##
      volumeClaimTemplate:
        spec:
          selector:
            matchLabels:
              app.kubernetes.io/name: k8s-prometheus-operator-pv
          storageClassName: manual
          volumeName: k8s-prometheus-operator-pv
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{ .Environment.Values.prometheus_bundles.storage }}

alertmanager:
  ingress:
    enabled: {{ .Environment.Values | getOrNil "ingress.enabled" | default false }}
    hosts: [ alertmanager.{{ .Environment.Values.cluster.domain }} ]
    annotations:
      kubernetes.io/ingress.class: {{ .Environment.Values.cluster.ingress_class }}
  alertmanagerSpec:
    externalUrl: http://alertmanager.{{ .Environment.Values.cluster.domain }}
  templateFiles:
    slack_notification.tmpl: |-
        {{`{{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}

        {{ define "slack.myorg.title" }}
            [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.alertname }} - Cluster: {{ template "cluster" . }}
        {{ end }}

        {{ define "slack.myorg.text" }}
        {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          {{ if .Labels.severity }} *Severity:* {{ .Labels.severity }}{{ end }}
          {{ if .Annotations.description }} *Description:* {{ .Annotations.description }}{{ end }}
          {{ if .Annotations.dashboard_url }} *Graph:* {{ .Annotations.dashboard_url }}{{ end }}
          {{ if .Annotations.runbook_url }} *Runbook:* {{ .Annotations.runbook_url }}{{ end }}
          {{ if .Labels.team }}*Team:* {{ .Labels.team }}{{ end }}
          *Details:*
            {{ range .Labels.SortedPairs }} - *{{ .Name }}:* *{{ .Value }}*
            {{ end }}
        {{ end }}
        {{ end }}`}}

  config:
    global:
      resolve_timeout: 5m
    templates:
      - '/etc/alertmanager/config/*.tmpl'
    route:
      receiver: default
      group_by: ["alertname"]
      repeat_interval: 4h
      routes:
        - match:
            alertname: Watchdog
          receiver: default
        - match:
            alertname: InfoInhibitor
          receiver: "null"
        - match_re:
            team: infra
          receiver: default
    receivers:
      - name: default
        slack_configs:
          - send_resolved: true
            channel: "{{ .Environment.Values.prometheus_bundles.default_slack_channel }}"
            api_url: {{ .Environment.Values.prometheus_bundles.default_slack_api_url }}
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            title: '{{`{{ template "slack.myorg.title" . }}`}}'
            text: '{{`{{ template "slack.myorg.text" . }}`}}'
      - name: 'null'
    inhibit_rules:
      - source_match:
          alertname: InfoInhibitor
        target_match:
          severity: info
        equal: ["namespace"]

grafana:
  enabled: false
  ingress:
    enabled: {{ .Environment.Values | getOrNil "ingress.enabled" | default false }}
    hosts: [ grafana.{{ .Environment.Values.cluster.domain }} ]
    annotations:
      kubernetes.io/ingress.class: {{ .Environment.Values.cluster.ingress_class }}
